
    <style>
        .custom-dropdown {
            position: relative;
            width: 200px;
            border: 1px solid red;
            margin: 5px;
        }

        .dropdown-field-custom {
            padding: 10px;
            background-color: #f0f0f0;
            cursor: pointer;
            font-size: large;
            margin: 10px;
        }

        .dropdown-list-custom {
            position: absolute;
            width: 100%;
            background-color: #fff;
            box-shadow: 0 8px 16px rgba(0,0,0,0.2);
            z-index: 100;
            display: none; /* Initially hidden */
        }

        .search-box-custom {
            width: calc(100% - 50px);
            padding: 10px;
            margin: 10px;
            border: 1px solid #ddd;
            background-color: rgb(168, 223, 168);
            border-radius: 10px;
        }

        .dropdown-item-custom {
            padding: 10px;
            cursor: pointer;
            border-bottom: 1px solid #eee;
        }

        .dropdown-item-custom:hover {
            background-color: #f6f6f6;
        }

        #data-display-custom {
            
        }
        .numberFieldCustom{
            margin: 5px;
        }
        .remove-btn-custom{
            margin: 5px;
            display: flex;
            align-items: center;
            justify-content: center;
        }
    </style>

<%= form_tag "create_new_expense" do %>
  <%= hidden_field_tag "personal_id", @personnel_id %>
  <div class="field">
    <%= label_tag(:date_and_time, "Date and Time:") %>
    <%= datetime_field_tag(:date_and_time) %>
  </div>
  <div class="field">
    <%= label_tag(:category, "Category:") %>
    <%= select_tag(:category, options_for_select(["select category type👇",'market🧺', 'online📱', 'travel✈️', 'occassional🫂'])) %>
  </div>
  <div class="field">
    <%= label_tag(:payment_type, "Payment Type:") %>
    <%= select_tag(:payment_type, options_for_select(["select payment type👇",'cash💰', 'online📱', 'card💳', 'bank transfer🏦', 'cheque📇'])) %>
  </div>
  <div class="field">
    <%= label_tag(:remarks, "Remarks:") %>
    <%= text_field_tag(:remarks) %>
  </div>

  <div id="form-template-custom" style="display: none;">
    <div class="custom-dropdown">
      <div class="dropdown-field-custom">Select a name</div>
      <div class="dropdown-list-custom">
        <%= text_field_tag :search, nil, placeholder: "Search...", class: "search-box-custom" %>
        <% @users.each do |user| %>
          <div class="dropdown-item-custom" data-value="<%= user.id %>">
            <%= user.name %>
          </div>
        <% end %>
      </div>
      <input type="number" class="numberFieldCustom" name="price"/>
      <button class="remove-btn-custom" type="button">Remove</button>
    </div>
  </div>

  <div id="forms-container-custom">
    <!-- Form groups will be dynamically inserted here -->
  </div>
  <button id="add-form-btn-custom" type="button">Add Form</button>
  <button id="submit-btn-custom" type="submit">SPLIT_BILL_PERSON_WISE</button>

  <div id="data-display-custom">
    <!-- Added data will be displayed here -->
  </div>
<% end %>



<script>
document.addEventListener('DOMContentLoaded', function() {
    const formsContainerCustom = document.getElementById('forms-container-custom');
    const addFormBtnCustom = document.getElementById('add-form-btn-custom');
    let formCount = 0; // Counter to ensure unique names for dynamically added elements

    // Function to create a new form group
    function createFormGroupCustom() {
        const templateCustom = document.getElementById('form-template-custom').cloneNode(true);
        templateCustom.style.display = 'block';
        templateCustom.id = '';

        const dropdownFieldCustom = templateCustom.querySelector('.dropdown-field-custom');
        const dropdownListCustom = templateCustom.querySelector('.dropdown-list-custom');
        const numberFieldCustom = templateCustom.querySelector('.numberFieldCustom');
        const hiddenInput = document.createElement('input');

        hiddenInput.type = 'hidden';
        hiddenInput.className = 'selected-value-input';
        hiddenInput.name = `selectedValues[${formCount}]`; // Array-like name to capture all values
        numberFieldCustom.name = `prices[${formCount}]`; // Unique name for each price input

        dropdownFieldCustom.addEventListener('click', function(event) {
            // Toggle display of dropdown list
            dropdownListCustom.style.display = dropdownListCustom.style.display === 'block' ? 'none' : 'block';
            event.stopPropagation();
        });

        dropdownListCustom.addEventListener('click', function(event) {
            // Set selected value to dropdown field and hidden input
            let target = event.target;
            if (target.classList.contains('dropdown-item-custom')) {
                dropdownFieldCustom.textContent = target.textContent.trim();
                hiddenInput.value = target.dataset.value;
                dropdownListCustom.style.display = 'none';
                templateCustom.appendChild(hiddenInput);
            }
        });

        // Prevent the dropdown from closing when clicking inside the search box
        const searchBoxCustom = templateCustom.querySelector('.search-box-custom');
        searchBoxCustom.addEventListener('click', function(event) {
            event.stopPropagation();
        });

        searchBoxCustom.addEventListener('keyup', function() {
            // Filter dropdown items based on search query
            const queryCustom = this.value.toLowerCase();
            const itemsCustom = dropdownListCustom.querySelectorAll('.dropdown-item-custom');
            itemsCustom.forEach(itemCustom => {
                const textCustom = itemCustom.textContent.toLowerCase();
                itemCustom.style.display = textCustom.includes(queryCustom) ? '' : 'none';
            });
        });

        const removeBtnCustom = templateCustom.querySelector('.remove-btn-custom');
        removeBtnCustom.addEventListener('click', function(event) {
            // Remove the form group from the DOM
            event.preventDefault();
            templateCustom.remove();
        });

        formsContainerCustom.appendChild(templateCustom);
        formCount++; // Increment the counter for the next form group
    }

    // Prevent default form submission for 'Add Form' button
    addFormBtnCustom.addEventListener('click', function(event) {
        event.preventDefault();
        createFormGroupCustom();
    });

    // Optionally, initialize one form group on page load if needed
     createFormGroupCustom();
});

</script>
















<%# 
<script>
 document.addEventListener('DOMContentLoaded', function() {
    const formsContainerCustom = document.getElementById('forms-container-custom');
    const addFormBtnCustom = document.getElementById('add-form-btn-custom');

    function createFormGroupCustom() {
        const templateCustom = document.getElementById('form-template-custom').cloneNode(true);
        templateCustom.style.display = 'block';
        templateCustom.id = '';

        const dropdownFieldCustom = templateCustom.querySelector('.dropdown-field-custom');
        const dropdownListCustom = templateCustom.querySelector('.dropdown-list-custom');

        dropdownFieldCustom.addEventListener('click', function(event) {
            dropdownListCustom.style.display = dropdownListCustom.style.display === 'block' ? 'none' : 'block';
            event.stopPropagation(); // Stop the click from immediately propagating to the document
        });

        const searchBoxCustom = templateCustom.querySelector('.search-box-custom');
        searchBoxCustom.addEventListener('click', function(event) {
            event.stopPropagation(); // Stop the click inside the search box from closing the dropdown
        });

        searchBoxCustom.addEventListener('keyup', function() {
            const queryCustom = this.value.toLowerCase();
            const itemsCustom = dropdownListCustom.querySelectorAll('.dropdown-item-custom');
            itemsCustom.forEach(itemCustom => {
                const textCustom = itemCustom.textContent.toLowerCase();
                itemCustom.style.display = textCustom.includes(queryCustom) ? '' : 'none';
            });
        });

        
        dropdownListCustom.addEventListener('click', function(event) {
        let target = event.target;
        if (target.classList.contains('dropdown-item-custom')) {
            dropdownFieldCustom.textContent = target.textContent.trim();
            
            // Assuming you have a hidden input to store the selected value
            let hiddenInput = templateCustom.querySelector('.selected-value-input');
            if (!hiddenInput) {
                hiddenInput = document.createElement('input');
                hiddenInput.type = 'hidden';
                hiddenInput.className = 'selected-value-input';
                hiddenInput.name = `selectedValue`; // Name this according to what your server expects
                templateCustom.appendChild(hiddenInput);
            }
            hiddenInput.value = target.dataset.value; // Make sure your items have a data-value attribute

            dropdownListCustom.style.display = 'none';
        }
        });


        document.addEventListener('click', function() {
            dropdownListCustom.style.display = 'none';
        });

        const removeBtnCustom = templateCustom.querySelector('.remove-btn-custom');
        removeBtnCustom.addEventListener('click', function() {
            templateCustom.remove();
        });

        formsContainerCustom.appendChild(templateCustom);
    }

    addFormBtnCustom.addEventListener('click', createFormGroupCustom);

    createFormGroupCustom();
});

</script> %>